
Atmeg32a_Master_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000684  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000596  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e5  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cb  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000125  00000000  00000000  000014fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  74:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z15SPI_init_Masterv>:
			PORTA|=(1<<PINA0);     
		}
		else if(color==1) // turns LED green
		{
			PORTA=0b00000000; //reset LED
			PORTA|=(1<<PINA1);
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	80 6a       	ori	r24, 0xA0	; 160
  80:	87 bb       	out	0x17, r24	; 23
  82:	8d b1       	in	r24, 0x0d	; 13
  84:	81 6d       	ori	r24, 0xD1	; 209
  86:	8d b9       	out	0x0d, r24	; 13
  88:	78 94       	sei
  8a:	08 95       	ret

0000008c <_Z9UART_initv>:
  8c:	10 bc       	out	0x20, r1	; 32
  8e:	8f e5       	ldi	r24, 0x5F	; 95
  90:	89 b9       	out	0x09, r24	; 9
  92:	88 e1       	ldi	r24, 0x18	; 24
  94:	8a b9       	out	0x0a, r24	; 10
  96:	8e e8       	ldi	r24, 0x8E	; 142
  98:	80 bd       	out	0x20, r24	; 32
  9a:	08 95       	ret

0000009c <_Z9UART_sendh>:
  9c:	5d 9b       	sbis	0x0b, 5	; 11
  9e:	fe cf       	rjmp	.-4      	; 0x9c <_Z9UART_sendh>
  a0:	8c b9       	out	0x0c, r24	; 12
  a2:	9b b3       	in	r25, 0x1b	; 27
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	89 27       	eor	r24, r25
  a8:	8b bb       	out	0x1b, r24	; 27
  aa:	08 95       	ret

000000ac <_Z12SPI_transferh>:
		}
	}

void SPI_transfer(uint8_t data)
{
	TCNT0=0;
  ac:	12 be       	out	0x32, r1	; 50
	SPDR=data;
  ae:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF))) {;/*wait for data transfer and recieving*/}
  b0:	77 9b       	sbis	0x0e, 7	; 14
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <_Z12SPI_transferh+0x4>
	UART_send(TCNT0);
  b4:	82 b7       	in	r24, 0x32	; 50
  b6:	0e 94 4e 00 	call	0x9c	; 0x9c <_Z9UART_sendh>
  ba:	08 95       	ret

000000bc <main>:
}

	
int main(void)
{
	SPI_init_Master();
  bc:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z15SPI_init_Masterv>
	UART_init();
  c0:	0e 94 46 00 	call	0x8c	; 0x8c <_Z9UART_initv>
	DDRA|=1<<PINA0|1<<PINA1|1<<PINA2; //PINA0 : Red(0), PINA1 : Green(1)
  c4:	8a b3       	in	r24, 0x1a	; 26
  c6:	87 60       	ori	r24, 0x07	; 7
  c8:	8a bb       	out	0x1a, r24	; 26
	PORTA=0b00000000; //set PINA0 and PINA1 as output and low	
  ca:	1b ba       	out	0x1b, r1	; 27
	TCCR0|=(1<<CS00);
  cc:	83 b7       	in	r24, 0x33	; 51
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	83 bf       	out	0x33, r24	; 51
	TCCR1B|=1<<CS11|1<<WGM12;
  d2:	8e b5       	in	r24, 0x2e	; 46
  d4:	8a 60       	ori	r24, 0x0A	; 10
  d6:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=1<<OCIE1A;
  d8:	89 b7       	in	r24, 0x39	; 57
  da:	80 61       	ori	r24, 0x10	; 16
  dc:	89 bf       	out	0x39, r24	; 57
	OCR1A=979;		// required frequency =532us ,prescaler=1, OCR1A= (16Mhz*532us/1)-1 = 8511, OCR1A= 4255 with prescaler 2 and Fosc=16Mhz
  de:	83 ed       	ldi	r24, 0xD3	; 211
  e0:	93 e0       	ldi	r25, 0x03	; 3
  e2:	9b bd       	out	0x2b, r25	; 43
  e4:	8a bd       	out	0x2a, r24	; 42
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0x2a>

000000e8 <__vector_7>:
    while (1) {}
}

ISR (TIMER1_COMPA_vect) //timing the data transfer
{
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	3f 93       	push	r19
  f6:	4f 93       	push	r20
  f8:	5f 93       	push	r21
  fa:	6f 93       	push	r22
  fc:	7f 93       	push	r23
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	af 93       	push	r26
 104:	bf 93       	push	r27
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
	PORTA^=(1<<PINA1);
 10a:	9b b3       	in	r25, 0x1b	; 27
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	89 27       	eor	r24, r25
 110:	8b bb       	out	0x1b, r24	; 27
	
	SPI_transfer(1);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 56 00 	call	0xac	; 0xac <_Z12SPI_transferh>
	PORTA^=(1<<PINA2);
 118:	9b b3       	in	r25, 0x1b	; 27
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	98 27       	eor	r25, r24
 11e:	9b bb       	out	0x1b, r25	; 27
	PORTA^=(1<<PINA2);
 120:	9b b3       	in	r25, 0x1b	; 27
 122:	98 27       	eor	r25, r24
 124:	9b bb       	out	0x1b, r25	; 27
	PORTA^=(1<<PINA2);
 126:	9b b3       	in	r25, 0x1b	; 27
 128:	89 27       	eor	r24, r25
 12a:	8b bb       	out	0x1b, r24	; 27
	
}
 12c:	ff 91       	pop	r31
 12e:	ef 91       	pop	r30
 130:	bf 91       	pop	r27
 132:	af 91       	pop	r26
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	7f 91       	pop	r23
 13a:	6f 91       	pop	r22
 13c:	5f 91       	pop	r21
 13e:	4f 91       	pop	r20
 140:	3f 91       	pop	r19
 142:	2f 91       	pop	r18
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
