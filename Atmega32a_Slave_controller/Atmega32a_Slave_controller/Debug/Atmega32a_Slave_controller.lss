
Atmega32a_Slave_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000011e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000060b  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000058e  00000000  00000000  000007cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000ef  00000000  00000000  00000d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000386  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000001f  00000000  00000000  00001226  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001245  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z14SPI_init_Slavev>:
		PORTA|=(1<<PINA0); 
	}
	else if(color==1) // turns LED On
	{
		PORTA=0b00000000;
		PORTA|=(1<<PINA1);
  7c:	be 9a       	sbi	0x17, 6	; 23
  7e:	6e 9a       	sbi	0x0d, 6	; 13
  80:	08 95       	ret

00000082 <_Z12SPI_transferh>:
	}
}

unsigned char SPI_transfer(unsigned char data)
{
	PORTA|=(1<<PINA2);
  82:	da 9a       	sbi	0x1b, 2	; 27
	SPDR=data;
  84:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF))) {;/*wait for data transfer and recieving*/}
  86:	77 9b       	sbis	0x0e, 7	; 14
  88:	fe cf       	rjmp	.-4      	; 0x86 <_Z12SPI_transferh+0x4>
	return (SPDR);
  8a:	8f b1       	in	r24, 0x0f	; 15
}
  8c:	08 95       	ret

0000008e <main>:

int main(void)
{
	
	DDRA|=1<<PINA0|1<<PINA1|1<<PINA2; //PINA0 : Off(0), PINA1 : On(1)
  8e:	8a b3       	in	r24, 0x1a	; 26
  90:	87 60       	ori	r24, 0x07	; 7
  92:	8a bb       	out	0x1a, r24	; 26
	PORTA=0b00000000; //set PINA0 and PINA1 as output and low
  94:	1b ba       	out	0x1b, r1	; 27
	SPI_init_Slave();
  96:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z14SPI_init_Slavev>
    while (1) 
    {
	data=SPI_transfer(0);
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 41 00 	call	0x82	; 0x82 <_Z12SPI_transferh>
  a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  a4:	fa cf       	rjmp	.-12     	; 0x9a <main+0xc>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
